//--------------------------------------
//--- 010 Editor v3.2.2 Binary Template
//
// File: ALTTPSave
// Author: Phillip "Antidote" Stephens
// Revision:
// Purpose: Reverse engineer ALTTP Saves
//--------------------------------------


enum <short> Letters
{
    A = 0x00,
    B = 0x01,
    C = 0x02,
    D = 0x03,
    E = 0x04,
    F = 0x05,
    G = 0x06,
    H = 0x07,
    FakeI = 0x08,
    I = 0xAF,
    J = 0x09,
    K = 0x0A,
    L = 0x0B,
    M = 0x0C,
    N = 0x0D,
    O = 0x0E,
    P = 0x0F,
    Q = 0x20,
    R = 0x21,
    S = 0x22,
    T = 0x23,
    U = 0x24,
    V = 0x25,
    W = 0x26,
    X = 0x27,
    Y = 0x28,
    Z = 0x29,
    a = 0x2A,
    b = 0x2B,
    c = 0x2C,
    d = 0x2D,
    e = 0x2E,
    f = 0x2F,
    g = 0x40,
    h = 0x41,
    i = 0x44,
    j = 0x43,
    k = 0x42,
    l = 0x45,
    m = 0x46,
    n = 0x47,
    o = 0x48,
    p = 0x49,
    q = 0x4A,
    r = 0x4B,
    s = 0x4C,
    t = 0x4D,
    u = 0x4E,
    v = 0x4F,
    w = 0x60,
    x = 0x61,
    y = 0x62,
    z = 0x63,
    Zero = 0x64,
    One = 0x65,
    Two = 0x66,
    Three = 0x67,
    Four = 0x68,
    Five = 0x69,
    Six = 0x6A,
    Seven = 0x6B,
    Eight = 0x6C,
    Nine = 0x6D,
    QuestionMark = 0x6E,
    Exclamation = 0x6F,
    Dash = 0x80,
    Period = 0x81,
    Comma = 0x82,
    OpenParenthesis = 0x85,
    CloseParenthesis = 0x86,
    Blank = 0xA9
    // Add more later
}; 

enum <byte> ProgressIndicator 
{
    LinkInBed,
    InCastleWithSword,
    CompletedFirstDungeon,
    BeatenAghanim
};

struct Pendants
{
    char Courage:1;
    char Wisdom:1;
    char Power:1;
};

struct AbilityFlags
{
    char Nothing:1; //?
    char Swim:1;
    char Dash:1;
    char Pull:1;
    char Unk:1; //---
    char Talk:1;
    char Read:1;
    char Unk2:1; //---
};

struct ProgressFlags
{
    char UncleSecretPassage:1;
    char DyingPriest:1; //?
    char ZeldaSanctuary:1; //?
    char Unused1:1;
    char UncleLeftHouse:1;
    char BookOfMudora:1;//? Math says it's a guess need to investigate
    char DwarfPartner:1; //?
    char Unused2:1;
};

struct ProgressFlags2
{
    char BottleFromBum:1;
    char BottleFromSalesMen:1;
    char Unused:1; //?
    char FluteBoy:1;
    char ThiefsChest:1;
    char SavedSmithPartner:1;
    char Unused:1; //?
    char SmithsHaveSword:1;
};

struct Crystals
{
    char MiseryMire:1;
    char DarkPalace:1;
    char IcePalace:1;
    char TurtleRock:1;
    char SwampPalace:1;
    char GargoyleDomain:1;
    char SkullWoods:1;
};

struct RoomFlags
{
    short Quadrant1:1;
    short Quadrant2:1;
    short Quadrant3:1;
    short Quadrant4:1;
    short Chest1:1;
    short Chest2:1;
    short Chest3:1;
    short Chest4:1;
    short BossBattleWon:1;
    short Key:1;
    short KeyOrChest:1;
    short ChestOrTile:1;
    short Door1:1;
    short Door2:1;
    short Door3:1;
    short Door4:1;
};

struct OverworldEvents
{
    char Unused:1;
    char HeartPiece:1;
    char Overlay:1;
    char Unused:1;
    char Unused:1;
    char Unused:1;
    char Set:1;
};
    
struct DungeonItemFlags
{
    char Unused:1;
    char Unused:1;
    char GanonsTower:1;
    char TurtleRock:1;
    char GargoylesDomain:1;
    char TowerOfHera:1;
    char IcePalace:1;
    char SkullWoods:1;
    char MiseryMire:1;
    char DarkPalace:1;
    char SwampPalace:1;
    char HyruleCastle2:1; // Doesn't exists in orignal game
    char DesertPalace:1;
    char EasternPalace:1;
    char HyruleCastle:1; // Doesn't exist in original game
    char SewerPassage:1; // Doesn't exist in original game
};

struct Items
{
    char Bow;
    char Boomerang;
    char Hookshot;
    char Bombs;
    char Mushroom;
    char FireRod;
    char IceRod;
    char Bombos;
    char Ether;
    char Quake;
    char Torch;
    char Hammer;
    char Flute;
    char BugNet;
    char Book;
    char Bottles;
    char Somaria;
    char Byrna;
    char MagicCape;
    char MagicMirror;
    char Gloves;
    char Boots;
    char Flippers;
    char MoonPearl;
    char unused; //?
    char Sword;
    char Shield;
    char Armor;
    char BottleType[4];
    short RupeeMax;
    short RupeeCurrent;
};
/*
enum <byte> StartLocation
{
    LinksHouse = 0x00,
    Sanctuary = 0x01,
 */   
    
enum <byte> MapIcon
{
    Nothing = 0x00, //?
    CrossInKakariko = 0x01, //?
    CrossAtFirstDungeon = 0x02, // 
    Pendant = 0x03,
    MasterSword = 0x04,
    AganhimCastle = 0x05,
    Crystal1 = 0x06,
    AllCrystals = 0x07,
    AganhimGanonTower = 0x08
};

struct LightDarkWorldIndicator
{
    char Unused:1;
    char Unused:1;
    char Unused:1;
    char Unused:1;
    char Unused:1;
    char Unused:1;
    char IsDarkWorld:1;
    char Unused:1;
};

struct Game
{
    local int GameOff = FTell();
    struct
    {
        RoomFlags roomFlags[0x140];
        OverworldEvents owEvents[0xc0];
        Items items;
        DungeonItemFlags Compass;
        DungeonItemFlags BigKey;
        DungeonItemFlags Map;
        short wishingPondRupeeCount;
        uchar heartPiecesCollected;
        uchar health;
        uchar magicPower;
        uchar keys;
        uchar bombUpgrades;
        uchar arrowUpgrades;
        uchar heartFiller; // Not useful for editing
        uchar magicFiller; // ^
        Pendants pendants;
        uchar bombFiller;
        uchar arrowFiller;
        uchar arrows;
        uchar Unused;
        AbilityFlags abilityFlags;
        Crystals crystals;
        uchar magicUsage;
        uchar keysEarnedPerDungeon[0x10];
        char UnusedBytes[0x39];
        ProgressIndicator pIndicator;
        ProgressFlags pFlags;
        MapIcon mapIcon;
        char abvr;
        ProgressFlags2 pIndicator2;
        LightDarkWorldIndicator worldIndicator;
        char unused;
        char tagAlong;
        char oldManFlags[0x06];
        char bombFlag; // Not useful for editing
        char unk[0x05];
        Letters name[0x06] <format = hex>;
        ushort valid <format = hex>;
        ushort dungeonDeathTotals[0x0D];
        short unk2;
        short lifeSaveCounter;
        short postGameDeathCounter;
        char UnusedBytes2[0xF7];
    }info; 
    ushort checksum <format = hex>;
};

struct
{
    Game games[6] <optimize = false>;
}file;