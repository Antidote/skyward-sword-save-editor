//--------------------------------------
//--- 010 Editor v3.2.2 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

BigEndian();

enum <uchar> WeaponID
{
    Bombs,
    Bow,
    ClawShot,
    Beetle,
    SlingShot,
    GustBellows,
    Whip,
    Nothing,
    BugNet,
    Harp // Useless but interesting
};

enum LocationID 
{
   Skyloft,
   SealedGrounds,
   FaronWoods,
   DeepWoods,
   LakeFloria,
   EldinVolcano,
   VolcanoSummit,
   LanayruMine,
   LanayruDesert,
   LanayruGorge,
   LanaryuSandSea,
   SkyviewTemple,
   EarthTemple,
   LanaryuMiningFacility,
   AncientCistern,
   Sandship,
   FireSanctuary,
   SkyKeep,
   FaroresSilentRealm,
   NayrusSilentRealm,
   DinsSilentRealm,
   TheGoddessessSilentRealm,
   TheSky,
   FunFunIsland = 0x1a,
   PumpkinLanding,
   BeedlesIsland,
   BambooIsland,
   IsleofSongs,
   BugRock,
   SkyviewSpring = 0x21,
   EarthSpring,
   TempleOfTime,
   KnightAcademy,
   Bazaar,
   SparringHall,
   LanayruCaves = 0x28,
   InsideTheGreatTree,
   SkippersRetreat = 0x2B,
   Shipyard,
   PirateStronghold,
   InsideTheStatueOfTheGoddess,
   Waterfall,
   OrielleAndParrowsHouse,
   RupinsHouse,
   BertiesHouse,
   TheLumpyPumpkin,
   SparrotsHouse,
   GondosHouse,
   PeatricesHouse,
   BatreauxsHouse,
   BeedlesAirshop,
   InsideTheThunderhead,
   ToFaronWoods,
   ToEldinVolcano,
   ToLanayruDesert,
   PipitsHouse,
   PipersHouse,
   KukielsHouse,
   HyliasRealm,
   SealedTemple,
   TempleOfHylia
};

struct ItemFlag
{
    uchar item1:1;
    uchar item2:1;
    uchar item3:1;
    uchar item4:1;
    uchar item5:1;
    uchar item6:1;
    uchar item7:1;
    uchar item8:1;
};

enum <uchar> InterfaceType
{
    Standard = 0x00,
    Light = 0x20,
    Pro = 0x40,
    FiToldLink = 0x08,
    StandardFi = Standard | FiToldLink,
    LightFi = Light | FiToldLink,
    ProFi = Pro | FiToldLink,
};

typedef struct vec3
{
    float x;
    float y;
    float z;
};

struct Position
{
    vec3 position;
    vec3 rotation;
};

struct GameData
{
    local int GameOff = FTell();
    union
    {
        struct Info
        {
            int64 playTime;
            int64 ticks;
            Position playPos;
            Position camPos;
            uchar data[0x890]; // Contains Beacons, times and other goodies, need to figure this block out
            LocationID locationID <format = hex>;
            short name[8];
            uchar missionFlags1;
            uchar unkFlags1;
            uchar grooseCutscene;
            uchar zeldaSkyloftCutcene1;
            uchar weaponsSelectableFlag;
            uchar knightTunic;
            uchar unkFlagsEldinKey;
            uchar unkFINDME;
            uchar unkFlags2[2];
            uchar gameBreakingBugLocation; // Area of interest, NEED TO RESEARCH!!!!!
            uchar unkFlags3[2];
            uchar zTargetIntro;
            uchar unkFlags4[4];
            uchar dekuHornet; // need to find value
            uchar unkFlag3;
            uchar crateIntro;
            uchar unkFlags5[5];
            uchar heroMode; // May also be other things, however if you AND it by 0x08 you get the flag for hero mode
            uchar unknownFlags;
            uchar goddessChests1;
            uchar goddessChests2;
            uchar goddessChests3;
            uchar unkFlags6[9];
            uchar itemsStolenInterfaceSelectionFlags;
            uchar itemsStolen1;
            uchar unkFlags7[11];
            uchar eventFlagsRattle;
            uchar unkFlags8[3];
            uchar beedlesInsectCage;
            uchar unkFlags9[4];
            uchar cawlinsLetter;
            uchar unkFlags10[0x12];        
            uchar treasure1;
            uchar unk;
            uchar treasure2; // Also holds some scene flags, such as horwell.
            uchar treasure3;
            uchar unkFlags11[0x0A];
            uchar introFlag; // Controls wether the file has gone through the first cutscene.
            uchar unkZeros[0x1A]; // This may not all be zeros;
            uchar unkFlags12[0x12];
            uchar unkZeros2[0x1E];
            uchar unkFlags13[0x46];
            InterfaceType interfaceType <format = hex>;
            uchar unkFlags14[0x11];
            ItemFlag itemFlags1;
            uchar staminaRollHeartItem;
            ItemFlag itemFlags2;
            uchar staminaFruit;
            ItemFlag itemFlags3;
            ItemFlag itemFlags4;
            uchar unk;
            ItemFlag itemFlags5;
            ItemFlag itemFlags6;
            ItemFlag itemFlags7;
            uchar unk;
            ItemFlag itemFlags8;
            uchar unk;
            ItemFlag itemFlags9;
            ItemFlag itemFlags10;
            ItemFlag itemFlags11;
            ItemFlag itemFlags12;
            ItemFlag itemFlags13;
            uchar unkFlags15[4];
            ItemFlag itemFlags14;
            ItemFlag itemFlags15;
            ItemFlag itemFlags16;
            uchar unkFlags16[3];
            uchar unkZeros17[0x30];
            union
            {
                int unk;
                char unkData[4];
            }unkUnion;
            ushort goddesPlumeGoldenSkull;
            ushort blueBirdFeatherEvilCrystal;
            ushort ornamentalSkullMonsterHorn;
            ushort monsterClawJellyBlob;
            ushort duskRelicAmberRelic;
            ushort ancientFlowerEldinOre;
            ushort lizardTailTumbleWeed;
            ushort birdFeatherDekuHornetLarvae;
            ushort fireflyStagBeatleAmount;
            ushort eldinRollerGerudoDragonfly;
            ushort sandCicadaLanayruAnt;
            ushort blessedButterflyVolcanicLadybug;
            ushort skyloftMantisDekuHornet;
            ushort woodlanRhinoBeetleFaronGrasshopper;
            ushort gratitudeCrystalsAmount<format = binary>;
            uchar  unused[0x0A];
            ushort unk;
            ushort rupees;
            uint32 ammo;
            uchar unkData[0x1AC];
            uchar scratch[0xE50];
            uchar unkBytes[4];
            uchar unkFlags18[2];
            uchar dashIntro;
            uchar unkFlag6;
            uchar unkFlag7; // Seems to deal with Horwell, for one scene and triggers the skyloft intro scene.
            uchar skyLoftFlags;
            uchar unkFlag8;
            uchar horwellJakamar;
            uchar unkFlags19[0x1A4];
            uchar scratch2[0x36F0];
            ushort totalHearts;
            ushort totalHeartPieces; // Not sure about this one
            ushort currentHealth; // Watching link die instantly is amusing :3
            ushort currentRoom;
            ushort unkShorts[9];
            uchar currentLocation[0x20];
            uchar currentArea[0x20];
            uchar currentLocationCopy[0x20];
            int unkInts[2];
            uchar unk;
            uchar unkBytes1[7]; // unused?
            uchar unk;
            uchar unkBytes2[0x0F];
            uchar unkValues[8]; // 0x00, 0x01 ... 0x07
            uchar unk;
            uchar unkBytes3[8];
            uchar isNew;
            WeaponID equipedWeapon;
            ushort equipedItem;
            ushort equipedItemCopy;
            uchar isNight;
            uchar unknown[8]; // padding?
       }info;
       uchar rawData[0x53BC];
    }data;
    int checksum <format = hex>;
};

struct Skip
{
    union
    {
        struct
        {
            ubyte unk:1;
            ubyte knightTunic:1;
            ubyte saveZeldaRequest:1;
            ubyte firstTablet:1;
            ubyte fiGoddessSword:1;
            ubyte ZeldaMissing:1;
            ubyte unused:1; // ? Verify
            ubyte unk :1;
            ubyte unk :1;
            ubyte loftwingStatueVictoryScene:1;
            ubyte redLoftwing:1;
            ubyte grooseIntroScene:1;
            ubyte zeldaToSurface:1;
            ubyte zeldaRecklessScene:1;
            ubyte unused:1; //? verify
            ubyte unused:1; //? verify
        }flags;
        uchar unk[0x20];
    }data;
    uint checksum;
};

struct
{
    if (FileSize() == 0xFBE0)
    {
        union
        {
            struct
            {
                uchar magic[4]; // SOUE
                uchar padding[0x18]; // 0x00
                int   headerSize <format = hex>; // header size - 1
            }headerData;
            uchar data[headerData.headerSize - 1];
        }header;
        GameData gameData[3] <optimize = false>;
        Skip skip[3];
        uchar padding[0x14];
    }
    else
    {
        GameData gameData;
    };
}file;