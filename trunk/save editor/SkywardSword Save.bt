//--------------------------------------
//--- 010 Editor v3.2.2 Binary Template
//
// File:
// Author:
// Revision:
// Purpose:
//--------------------------------------

BigEndian();

enum <byte> WeaponID
{
    Bombs,
    Bow,
    ClawShot,
    Beetle,
    SlingShot,
    GustBellows,
    Whip,
    Nothing,
    BugNet,
    Harp // Useless but interesting
};

enum <byte> LocationID 
{
   Skyloft,
   SealedGrounds,
   FaronWoods,
   DeepWoods,
   LakeFloria,
   EldinVolcano,
   VolcanoSummit,
   LanayruMine,
   LanayruDesert,
   LanayruGorge,
   LanaryuSandSea,
   SkyviewTemple,
   EarthTemple,
   LanaryuMiningFacility,
   AncientCistern,
   Sandship,
   FireSanctuary,
   SkyKeep,
   FaroresSilentRealm,
   NayrusSilentRealm,
   DinsSilentRealm,
   TheGoddessessSilentRealm,
   TheSky,
   FunFunIsland = 0x1a,
   PumpkinLanding,
   BeedlesIsland,
   BambooIsland,
   IsleofSongs,
   BugRock,
   SkyviewSpring = 0x21,
   EarthSpring,
   TempleOfTime,
   KnightAcademy,
   Bazaar,
   SparringHall,
   LanayruCaves = 0x28,
   InsideTheGreatTree,
   SkippersRetreat = 0x2B,
   Shipyard,
   PirateStronghold,
   InsideTheStatueOfTheGoddess,
   Waterfall,
   OrielleAndParrowsHouse,
   RupinsHouse,
   BertiesHouse,
   TheLumpyPumpkin,
   SparrotsHouse,
   GondosHouse,
   PeatricesHouse,
   BatreauxsHouse,
   BeedlesAirshop,
   InsideTheThunderhead,
   ToFaronWoods,
   ToEldinVolcano,
   ToLanayruDesert,
   PipitsHouse,
   PipersHouse,
   KukielsHouse,
   HyliasRealm,
   SealedTemple,
   TempleOfHylia
};

struct ItemFlag
{
    byte item1:1;
    byte item2:1;
    byte item3:1;
    byte item4:1;
    byte item5:1;
    byte item6:1;
    byte item7:1;
    byte item8:1;
};

enum <byte> InterfaceType
{
    Standard = 0x00,
    Light = 0x20,
    Pro = 0x40,
    FiToldLink = 0x08,
    StandardFi = Standard | FiToldLink,
    LightFi = Light | FiToldLink,
    ProFi = Pro | FiToldLink,
};

typedef struct vec3
{
    float x;
    float y;
    float z;
};

struct Position
{
    vec3 position;
    vec3 rotation;
};

struct GameData
{
    local int GameOff = FTell();
    union
    {
        struct Info
        {
            int64 playTime;
            int64 ticks;
            Position playPos;
            Position camPos;
            FSeek(GameOff + 0x08D3);
            LocationID locationID;
            short name[8];
            uchar missionFlags1;
            uchar unkFlags1;
            uchar grooseCutscene;
            uchar zeldaSkyloftCutcene1;
            uchar weaponsSelectableFlag;
            uchar knightTunic;
            uchar unkFlagsEldinKey;
            uchar unk;
            FSeek(GameOff + 0x08F1);
            char zTargetIntro;
            char unkFlag1[4];
            char dekuHornet; // need to find value
            char unkFlag3;
            char crateIntro;
            char unkFlags2[5];
            //FSeek(GameOff + 0x08FE);
            byte heroMode; // May also be other things, however if you AND it by 0x08 you get the flag for hero mode
            FSeek(GameOff + 0x090C);
            byte itemsStolenInterfaceSelectionFlags;
            byte itemsStolen1;
            FSeek(GameOff + 0x0934);
            uchar treasure1;
            uchar unk;
            uchar treasure2; // Also holds some scene flags, such as horwell.
            uchar treasure3;
            FSeek(GameOff + 0x0941);
            byte introFlag; // Controls wether the file has gone through the first cutscene.
            FSeek(GameOff + 0x09D2);
            InterfaceType interfaceType <format = hex>;
            FSeek(GameOff + 0x09E4);
            ItemFlag itemFlags1;
            uchar staminaRollHeartItem;
            ItemFlag itemFlags2;
            uchar staminaFruit;
            ItemFlag itemFlags3;
            ItemFlag itemFlags4;
            uchar unk;
            ItemFlag itemFlags5;
            ItemFlag itemFlags6;
            ItemFlag itemFlags7;
            uchar unk;
            ItemFlag itemFlags8;
            uchar unk;
            ItemFlag itemFlags9;
            ItemFlag itemFlags10;
            ItemFlag itemFlags11;
            ItemFlag itemFlags12;
            ItemFlag itemFlags13;
            uchar unk;
            uchar unk;
            uchar unk;
            uchar unk;
            ItemFlag itemFlags14;
            ItemFlag itemFlags15;
            ItemFlag itemFlags16;
            uchar unk;
            uchar unk;
            uchar unk;
            uchar unk;          
            FSeek(GameOff + 0x0A3C);
            ushort amberRelic;
            FSeek(GameOff + 0x0A44);
            ushort fireflyStagBeatleAmount;
            ushort unkBug1;
            ushort gerudoDragonFly;
            FSeek(GameOff + 0x0A50);
            ushort gratitudeCrystalsAmount<format = binary>;
            FSeek(GameOff + 0x0A5E);
            ushort rupees;
            FSeek(GameOff + 0x1A66);
            char dashIntro;
            char unkFlag6;
            char unkFlag7; // Seems to deal with Horwell, for one scene and triggers the skyloft intro scene.
            char skyLoftFlags;
            char unkFlag8;
            char horwellJakamar;
            FSeek(GameOff + 0x30F5);
            char skyloftIntro;
            char unkflags[2];
            char lanayruFacilityBarrel1;
            char lanayruFacilityBarrel2;
            char linkroomRupee;
            FSeek(GameOff + 0x3570);
            uchar enemyDeadFlag; // Seems to be the "Electric Toad" in the sand pit to the left of the save in Lanayru Mining Facility
            FSeek(GameOff + 0x5302);
            ushort totalHearts;
            ushort totalHeartPieces; // Not sure about this one
            ushort currentHealth; // Watching link die instantly is amusing :3
            byte unk;
            byte currentRoom;
            FSeek(GameOff + 0x531C);
            string currentLocation;
            FSeek(GameOff + 0x533C);
            string currentArea;
            FSeek(GameOff + 0x535C);
            string currentLocationCopy;
            FSeek(GameOff + 0x53AD);
            char isNew;
            WeaponID equipedWeapon;
            FSeek(GameOff + 0x53B0);
            char equipedItem;
            char equipedItemCopy;
            char unknown; // Dowsing?
            char isNight;
            char unknown;
       }info;
       char rawData[0x53BC];
    }data;
    int checksum <format = hex>;
};

struct Skip
{
    char unk[0x20];
    uint checksum;
};

struct
{
    union
    {
        struct
        {
            char magic[4]; // SOUE
            uchar padding[0x18]; // 0x00
            int   headerSize <format = hex>; // header size - 1
        }headerData;
        char data[headerData.headerSize - 1];
    }header;
    GameData gameData[3] <optimize = false>;
    
    Skip skip[3];
}file;
